---
title: 000.00 TypeScript - ]

tags: 
- AngularJS
- Gulp
- Bower
- npm
- nodejs
- github
- Visual Studio Code
- JavaScript
- TypeScript

---
test
###http://robertdunaway.github.io

##[All code kata lists](http://mycodekatas.github.io/)

 <img src="https://raw.githubusercontent.com/robertdunaway/katas-typescript/master/katas-TS-logo.png" alt="Smiley face" height="200" width="200"> 

# Introduction to code katas
Code katas are repetitive tasks meant to enhance and sharpen your skills.
It’s easy to find yourself stuck in a programming rut because business applications don’t require the use of all programming techniques.  Code Katas help round out your skill set in small, easy to consume, exercises.

A term first coined by Dave Thomas, code kata is basically an exercise in programming. This term is inspired from the Japanese concept of kata and used by Dave Thomas in his book The Pragmatic Programmer.  An author, computer programmer and editor, he co-authored this book The Pragmatic Programmer along with Andy Hunt.

Kata stands for “form” and this term is diligently used across different aspects of life.  Over centuries, this practice has been brought to the software and programming industry. In his book, Code Kata – How it Started, Dave Thomas reveals how he brought the idea of kata to coding. The book states that Dave started to play with a piece of code with an intention of learning something about the code.

In coding domain, the primary intention to code kata is to help programmers master a specific technique or skill in programming. With code kata, a programmer can enter a safe environment to try new techniques, make mistakes and learn from those mistakes. He can set aside the complexities and problems of daily programming environment, find new ways to do a particular code and learn with others.

## How to use code katas
Code katas are intended to be short, to the point, and repeatable.  Each code kata should take 10 minutes or less.  Some tutorials may take longer but 10 minutes or less is the goal.

The first time you do a code kata feel free to read through the kata and understand the material.  Try to follow along and do what the kata instructs.  There is no such thing as cheating so if you need to read ahead then do so.

Repeat the kata daily until you feel comfortable performing the kata without reading ahead.  Then move on to the next kata.  

You may wish to do more than one kata a day.  Be careful not to rush through and miss out on the benefit of repetition.  Like any skill your form and execution directly impact the value gained from the time you put into practice. Don’t exercise each Code kata only once them move onto the next.  The intent is simple repetition.

### Possible Process to Follow

 1. Review the entire code kata
 2. Attempt to work through the code kata.
 3.	Repeat until you can execute the code kata without “cheating”
 4.	Research the code kata subject to learn a little more
 5.	Execute the code kata again but add your own examples
 6.	Move onto the next kata


> TIP – It’s better to practice a little each day than a cramming
> everything into one day.

> TIP – It is important to go slow, even on the most basic katas, so
> your mind and body can build muscle and experiential memory.

> TIP – After you are finished with your kata, apply a little creativity
> and try a few more repetitive examples of the kata.

> TIP – These katas will teach you about the language but that is not
> their primary goal. If time permits do a Bing/Google search on the
> Kata and use the opportunity to sharpen your understanding of the
> topic.

> TIP – Every Kata will have two solutions.  The “Before” solution is
> what you’ll use for your Kata and “After” is code that works.

Here is a podcast on code katas.

Reference podcast "15: Code kata - A practice Areana for Becoming a Better Programmer" by Developer Tea
http://podbay.fm/show/955596067/e/1423228800?autostart=1

